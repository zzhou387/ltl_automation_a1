<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Arguments -->
  <arg name="agent_name" default="turtlebot"/>
  <arg name="plan_name" default="/action_plan_1"/>
  <arg name="pose_x" default="0.0" />
  <arg name="pose_y" default="0.0" />
  <arg name="init_yaw" default="0.0" />

  <arg name="gui"        default="true"/>
  <arg name="world_file" default="$(env TURTLEBOT_GAZEBO_WORLD_FILE)"/>
  <arg name="base"       value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"    value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
  <arg name="stacks"     value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
<!--    <arg name="world_name" value="$(arg world_file)"/>-->
  </include>

  <include file="$(find turtlebot_gazebo)/launch/includes/$(arg base).launch.xml">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
    <arg name="pose_x" value="$(arg pose_x)"/>
    <arg name="pose_y" value="$(arg pose_y)"/>
    <arg name="init_yaw" value="$(arg init_yaw)"/>
  </include>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>

  <!-- Run mocap -->
  <include file="$(find mocap_simulator)/launch/qualisys_simulator.launch" />

  <!-- Run mobile robot LTL node with the 2D pose region monitor-->
  <node name="$(arg agent_name)_region_2d_pose_monitor" pkg="ltl_automaton_std_transition_systems" type="region_2d_pose_monitor.py" output="screen" >
    <remap from="transition_system_textfile" to="transition_system_turtlebot_textfile" />
    <remap from="agent_2d_region_pose" to="qualisys/mobile_base/pose" />
    <remap from="current_region" to="$(arg agent_name)/current_region" />
  </node>

  <!-- Run Turtlebot navigation -->
  <include file="$(find turtlebot_gazebo)/launch/amcl_demo.launch">
    <arg name="map_file" value="$(find turtlebot_navigation)/maps/marc_2.yaml"/>
    <arg name="initial_pose_x" value="$(arg pose_x)"/>
    <arg name="initial_pose_y" value="$(arg pose_y)"/>
    <arg name="initial_pose_a" value="$(arg init_yaw)"/>
  </include>

  <!-- Run BT node -->
  <node name="ltl_bt_interface_openshelf" pkg="ltl_automation_a1" type="ltl_bt_interface_openshelf" required="true" output="screen">
    <remap from="transition_system_textfile" to="transition_system_turtlebot_textfile" />
<!--    <remap from="/move_base" to="/$(arg agent_name)/move_base" />-->
    <remap from="current_region" to="$(arg agent_name)/current_region" />
    <remap from="/action_plan" to="$(arg plan_name)" />
    <remap from="ltl_trace" to="/$(arg agent_name)/ltl_trace"/>
    <remap from="synchronization_service" to="/$(arg agent_name)/synchronization_service"/>
    <remap from="replanning_request" to="/$(arg agent_name)/replanning_request"/>
    <remap from="load_disturbance" to="/$(arg agent_name)/load_disturbance"/>
    <remap from="fake_input" to="/$(arg agent_name)/fake_input"/>
  </node>

  <!-- Run local LTL planner node -->
  <node name="$(arg agent_name)_local_ltl_planner" pkg="ltl_automaton_planner" type="local_planner_node_unitest.py" output="screen" >
    <param name="robot_name" value="turtlebot" />
  </node>

</launch>
